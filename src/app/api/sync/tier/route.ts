aW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInOwppbXBvcnQgeyBhdXRoLCBjbGVya0NsaWVudCB9IGZyb20gJ0BjbGVyay9uZXh0anMvc2VydmVyJzsKaW1wb3J0IHsgYXBpIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29udmV4L19nZW5lcmF0ZWQvYXBpJzsKaW1wb3J0IHsgZmV0Y2hNdXRhdGlvbiB9IGZyb20gJ2NvbnZleC9uZXh0anMnOwppbXBvcnQgeyBkZXRlY3RUaWVyRnJvbUNsZXJrVXNlciwgbG9nVGllckRldGVjdGlvbiB9IGZyb20gJ0AvbGliL3RpZXItZGV0ZWN0aW9uJzsKaW1wb3J0IHsgZGV0ZWN0QWN0aXZlU3Vic2NyaXB0aW9uRnJvbUNsZXJrIH0gZnJvbSAnQC9saWIvY2xlcms tYmlsbGluZy1kZXRlY3Rpb24nOwoKZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QoKSB7CiAgdHJ5IHsKICAgIGNvbnN0IHsgdXNlcklkIH0gPSBhd2FpdCBhdXRoKCk7CiAgICBpZiAoIXVzZXJJZCkgewogICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ1V uYXV0aG9yaXplZCcgfSwgeyBzdGF0dXM6IDQwMSB9KTsKICAgIH0KCiAgICBjb25zb2xlLmxvZygn8J+PtCDigJMgTWFudWFsIHRpZXIgc3luYyByZXF1ZXN0ZWQgZm9yIHVzZXI6Jywg dXNlcklkLnNsaWNlKC04KSk7CgogICAgY29uc3QgY2xpZW50ID0gYXdhaXQgY2xlcmtDbGllbnQoKTsKICAgIGNvbnN0IGNsZXJrVXNlciA9IGF3YWl0IGNsaWVudC51c2Vycy5nZXRVc2VyKHVzZXJJZCk7CgogICAgY29uc3QgdGllclJlc3VsdCA9IGRldGVjdFRpZXJGcm9tQ2xlcmtVc2VyKGNsZXJrVXNlcik7CiAgICBsb2dUaWVyRGV0ZWN0aW9uKHVzZXJJZCwgdGllclJlc3VsdCwgJ21hbnVhbF9zeW5jJyk7CgogICAgaWYgKHRpZXJSZXN1bHQudGllciA9PT0gJ2ZyZWVfdXNlcicpIHsKICAgICAgY29uc3QgaGFzRW1wdHlNZXRhZGF0YSA9IE9iamVjdC5rZXlzKGNsZXJrVXNlci5wdWJsaWNNZXRhZGF0YSkubGVuZ3RoID09PSAwOwogICAgICBpZiAoaGFzRW1wdHlNZXRhZGF0YSkgewogICAgICAgIGNvbnNvbGUubG9nKCfwn5yNIEVtcHR5IG1ldGFkYXRhIGRldGVjdGVkIC0gY2hlY2tpbmcgZm9yIHdlYmhvb2sgZmFpbHVyZScpOwogICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvblN0YXR1cyA9IGF3YWl0IGRldGVjdEFjdGl2ZVN1YnNjcmlwdGlv bkZyb21DbGVyayh1c2VySWQsIGNsaWVudCk7CiAgICAgICAgaWYgKHN1YnNjcmlwdGlvblN0YXR1cy5oYXNBY3RpdmVTdWJzY3JpcHRpb24gJiYgc3Vic2NyaXB0aW9uU3RhdHVzLmNvbmZpZGVuY2UgPT09ICdoaWdoJykgewogICAgICAgICAgYXdhaXQgY2xpZW50LnVzZXJzLnVwZGF0ZVVzZXIodXNlcklkLCB7IHB1YmxpY01ldGFkYXRhOiB7IHRpZXI6ICdwcmVtaXVtX3VzZXInLCBwbGFuOiAncHJlbWl1bScsIHN1YnNjcmlwdGlvblR5cGU6IHN1YnNjcmlwdGlvblN0YXR1cy5zdWJzY3JpcHRpb25UeXBlLCBiaWxsaW5nOiBzdWJzY3JpcHRpb25TdGF0dXMuc3Vic2NyaXB0aW9uVHlwZSwgcGxhbl9pZDogc3Vic2NyaXB0aW9uU3RhdHVzLnBsYW5JZCwgc3Vic2NyaXB0aW9uX3N0YXR1czogJ2FjdGl2ZScsIGF1dG9fcmVjb3ZlcnlfYXBwbGllZF9hdDogbmV3IERhdGUoKS50b0lTTygpLCBhdXRvX3JlY292ZXJ5X3JlYXNvbjogJ1dlYmhvb2sgZmFpbHVyZSBhdXRvLWRldGVjdGVkIGFuZCBmaXhlZCBkdXJpbmcgc3luYycgfSB9KTsKICAgICAgICAgIGF3YWl0IGZldGNoTXV0YXRpb24oYXBpLnVzZXJzLnNldFRpZXIsIHs gY2xlcmtJZDogdXNlcklkLCB0aWVyOiAncHJlbWl1bV91c2VyJywgc3Vic2NyaXB0aW9uVHlwZTogc3Vic2NyaXB0aW9uU3RhdHVzLnN1YnNjcmlwdGlvblR5cGUgfSk7CiAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBzdWNjZXNzOiB0cnVlLCB0aWVyOiAncHJlbWl1bV91c2VyJywgc3Vic2NyaXB0aW9uVHlwZTogc3Vic2NyaXB0aW9uU3RhdHVzLnN1YnNjcmlwdGlvblR5cGUsIGNvbmZpZGVuY2U6ICdoaWdoJywgc291cmNlOiAnd2ViaG9va19mYWlsdXJlX3JlY292ZXJ5JywgbWVzc2FnZTogJ+KcjS BXZWJob29rIGZhaWx1cmUgZGV0ZWN0ZWQgYW5kIGF1dG9tYXRpY2FsbHkgZml4ZWQhIFlvdSBub3cgaGF2ZSBwcmVtaXVtIGFjY2Vzcy4nLCByZWNvdmVyeTogeyBpc3N1ZTogJ1dlYmhvb2sgZmFpbHVyZSAtIGVtcHR5IG1ldGFkYXRhIGRlc3BpdGUgYWN0aXZlIHN1YnNjcmlwdGlvbicsIHNvbHV0aW9uOiAnQXV0b21hdGljYWxseSByZXN0b3JlZCBwcmVtaXVtIHN0YXR1cycsIGRldGFpbHM6IHN1YnNjcmlwdGlvblN0YXR1cyB9IH0pOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIGlmICh0aWVyUmVzdWx0LmNvbmZpZGVuY2UgPT09ICdoaWdoJykgewogICAgICBhd2FpdCBmZXRjaE11dGF0aW9uKGFwaS51c2Vycy5zZXRUaWVyLCB7IGNsZXJrSWQ6IHVzZXJJZCwgdGllcjogdGllclJlc3VsdC50aWVyLCBzdWJzY3JpcHRpb25UeXBlOiB0aWVyUmVzdWx0LnN1YnNjcmlwdGlvblR5cGUgfSk7CiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbiggeyBzdWNjZXNzOiB0cnVlLCB0aWVyOiB0aWVyUmVzdWx0LnRpZXIsIHN1YnNjcmlwdGlvblR5cGU6IHRpZXJSZXN1bHQuc3Vic2NyaXB0aW9uVHlwZSwgY29uZmlkZW5jZTogdGllclJlc3VsdC5jb25maWRlbmNlLCBzb3VyY2U6IHRpZXJSZXN1bHQuc291cmNlLCBtZXNzYWdlOiB0aWVyUmVzdWx0LnRpZXIgPT09ICdwcmVtaXVtX3VzZXInID8gJ1ByZW1pdW0gc3Vic2NyaXB0aW9uIGRldGVjdGVkIGFuZCBhY3RpdmF0ZWQhJyA6ICdBY2NvdW50IHN0YXR1cyB2ZXJpZmllZCAtIHlvdSdcJ2Ug b24gdGhlIGZyZWUgcGxhbicgfSk7CiAgICB9CgogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICBjb25zb2xlLmVycm9yKCfwn5CoIEVycm9yIHN5bmNpbmcgdGllcjonLCBlcnJvcik7CiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ0ZhaWxlZCB0byBzeW5jIHRpZXInLCBkZXRhaWxzOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyB9LCB7IHN0YXR1czogNTAwIH0pOwogIH0KfQoKZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVCgpIHsKICB0cnkgewogICAgY29uc3QgeyB1c2VySWQgfSA9IGF3YWl0IGF1dGgoKTsKICAgIGlmICghdXNlcklkKSB7CiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbiggeyBlcnJvcjogJ1V uYXV0aG9yaXplZCcgfSwgeyBzdGF0dXM6IDQwMSB9KTsKICAgIH0KICAgIGNvbnN0IGNsaWVudCA9IGF3YWl0IGNsZXJrQ2xpZW50KCk7CiAgICBjb25zdCBjbGVya1VzZXIgPSBhd2FpdCBjbGllbnQudXNlcnMuZ2V0VXNlcih1c2VySWQpOwogICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsKICAgICAgdXNlcklkOiBjbGVya1VzZXIuaWQsCiAgICAgIHB1YmxpY01ldGFkYXRhOiBjbGVya1VzZXIucHVibGljTWV0YWRhdGEsCiAgICAgIHByaXZhdGVNZXRhZGF0YTogY2xlcmtVc2VyLnByaXZhdGVNZXRhZGF0YSwKICAgICAgZXh0ZXJuYWxBY2NvdW50czogY2xlcmtVc2VyLmV4dGVybmFsQWNjb3VudHM/Lm1hcChhY2MgPT4gKHsgcHJvdmlkZXI6IGFjYy5wcm92aWRlciwgaWQ6IGFjYy5pZCB9KSksCiAgICB9KTsKICB9IGNhdGNoIChlcnJvcikgewogICAgY29uc29sZS5lcnJvcign8J+QqCBFcnJvciBnZXR0aW5nIHVzZXIgZGF0YTonLCBlcnJvcik7CiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ0ZhaWxlZCB0byBnZXQgdXNlciBkYXRhJywgZGV0YWlsczogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcicgfSwgeyBzdGF0dXM6IDUwMCB9KTsKICB9Cn0K